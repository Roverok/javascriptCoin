// Generated by CoffeeScript 1.6.3
(function() {
  var op;

  test.uses("QueryInterface", "Datastore.BalanceSheet", "Datastore.SuperMarket", "Datastore.Amount", "Datastore.Account", "Datastore.Ratio", "Datastore.Market", "Datastore.Book");

  op = require('../lib/operations');

  describe("QueryInterface", function() {
    setup_mocking();
    beforeEach(function() {
      var ds;
      this.balancesheet = this.mockify(new BalanceSheet());
      this.supermarket = this.mockify(new SuperMarket());
      ds = {};
      ds.balancesheet = this.balancesheet.object;
      ds.supermarket = this.supermarket.object;
      this.qi = new QueryInterface(ds);
      return this.mockify('qi');
    });
    it('should provide an account balances', function() {
      var account_id, acct, balances, c, result, v, _ref, _ref1;
      account_id = 'Fred';
      acct = this.mockify(new Account());
      balances = {};
      this.balancesheet.expects('get_account').once().withArgs(account_id).returns(acct.object);
      _ref = Account.supported_currencies;
      for (c in _ref) {
        v = _ref[c];
        if (v) {
          balances[c] = amt(Math.random());
          acct.expects('get_balance').once().withArgs(c).returns(balances[c]);
        }
      }
      result = this.qi.get_balances(account_id);
      result.result.should.equal(op.BALANCES);
      result.account.should.equal(account_id);
      _ref1 = result.balances;
      for (c in _ref1) {
        v = _ref1[c];
        balances[c].should.equal_amount(v);
        delete balances[c];
      }
      return Object.keys(balances).length.should.equal(0);
    });
    it('should provide information about an open order');
    it('should provide information about a closed order');
    it('should list all open orders for a given account', function() {
      var account_id, acct, orders, result;
      account_id = 'Fred';
      acct = this.mockify(new Account());
      orders = ["order1", "order2"];
      this.balancesheet.expects('get_account').once().withArgs(account_id).returns(acct.object);
      acct.expects('get_open_orders').once().returns(orders);
      result = this.qi.get_open_orders(account_id);
      result.result.should.equal(op.OPEN_ORDERS);
      result.account.should.equal(account_id);
      return result.orders.should.equal(orders);
    });
    it('should provide a ticker quote', function() {
      var ask_price, bid_price, last_price, market, mkt, ticker;
      market = this.mockify(new Market('BTC', 'USD'));
      mkt = market.object;
      bid_price = new Ratio(amt('9'));
      ask_price = new Ratio(amt('11'));
      last_price = new Ratio(amt('10'));
      this.supermarket.expects('get_market').twice().withArgs('USD', 'BTC').returns(mkt);
      market.expects('get_last_price').once().withArgs('USD').returns(last_price);
      this._qi.expects('top_of_book').once().withArgs(mkt.left_book).returns({
        price: bid_price.inverse()
      });
      this._qi.expects('top_of_book').once().withArgs(mkt.right_book).returns({
        price: ask_price
      });
      ticker = this.qi.get_ticker('USD', 'BTC');
      ticker.result.should.equal(op.TICKER);
      ticker.bid.should.equal_amount(bid_price);
      ticker.ask.should.equal_amount(ask_price);
      return ticker.last.should.equal_ratio(last_price);
    });
    it('should provide bid and ask prices', function() {
      var ask_price, bid_price, mkt, spread;
      mkt = new Market('BTC', 'USD');
      bid_price = new Ratio(amt('9'));
      ask_price = new Ratio(amt('11'));
      this.supermarket.expects('get_market').once().withArgs('BTC', 'USD').returns(mkt);
      this._qi.expects('top_of_book').once().withArgs(mkt.left_book).returns({
        price: bid_price
      });
      this._qi.expects('top_of_book').once().withArgs(mkt.right_book).returns({
        price: ask_price.inverse()
      });
      spread = this.qi.get_spread('BTC', 'USD');
      spread.bid.should.equal_amount(bid_price);
      spread.ask.should.equal_amount(ask_price);
      this.supermarket.expects('get_market').once().withArgs('USD', 'BTC').returns(mkt);
      this._qi.expects('top_of_book').once().withArgs(mkt.left_book).returns({
        price: bid_price
      });
      this._qi.expects('top_of_book').once().withArgs(mkt.right_book).returns({
        price: ask_price.inverse()
      });
      spread = this.qi.get_spread('USD', 'BTC');
      spread.bid.should.equal_amount(bid_price.inverse());
      return spread.ask.should.equal_amount(ask_price.inverse());
    });
    return it('should be able to inspect the top of a book', function() {
      var book, results;
      book = new Book();
      book.add_order(buyBTC(new Account(), 1, 10));
      results = this.qi.top_of_book(book);
      return results.price.should.equal_amount(amt('10'));
    });
  });

}).call(this);
