// Generated by CoffeeScript 1.6.3
(function() {
  var DataStore, ProcessingChainEntrance, Q, serialize, stump,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Q = require('q');

  DataStore = require('./datastore/datastore');

  serialize = require('./util').serialize;

  stump = require('stump');

  module.exports = ProcessingChainEntrance = (function() {
    function ProcessingChainEntrance(engine, journal) {
      this.engine = engine;
      this.journal = journal;
      this.dump_snapshot = __bind(this.dump_snapshot, this);
      this.load_snapshot = __bind(this.load_snapshot, this);
      this.create_snapshot = __bind(this.create_snapshot, this);
      this.forward_operation = __bind(this.forward_operation, this);
      this.start = __bind(this.start, this);
      stump.stumpify(this, this.constructor.name);
      this.global_operation_serial = 0;
    }

    ProcessingChainEntrance.prototype.start = function() {
      var _this = this;
      this.info("Starting PCE");
      return Q.all([
        this.journal.start(this.forward_operation, this.load_snapshot).then(function() {
          _this.info('INITIALIZED/REPLAYED LOG');
          return null;
        })
      ]);
    };

    ProcessingChainEntrance.prototype.forward_operation = function(operation) {
      var message, retval,
        _this = this;
      if (!operation) {
        throw Error("No Operation supplied");
      }
      if (operation.serial) {
        if (operation.serial !== this.global_operation_serial) {
          this.error("Serial Number " + operation.serial + " != " + this.global_operation_serial);
          throw Error("Serial Number " + operation.serial + " != " + this.global_operation_serial);
        }
      }
      operation.serial = this.global_operation_serial;
      this.info("Bumping serial to:", this.global_operation_serial);
      this.global_operation_serial += 1;
      message = JSON.stringify(operation);
      retval = this.engine.execute_operation(operation);
      return Q.all([this.journal.record(message)]).then(function() {
        var packet;
        _this.info('FORWARDING', serialize(retval));
        packet = {
          operation: operation,
          retval: retval
        };
        return serialize(packet);
      });
    };

    ProcessingChainEntrance.prototype.create_snapshot = function() {
      var deferred;
      deferred = Q.defer();
      deferred.resolve({
        serial: this.global_operation_serial,
        snapshot: this.engine.datastore.create_snapshot()
      });
      return deferred.promise;
    };

    ProcessingChainEntrance.prototype.load_snapshot = function(data) {
      this.info("PCE LOADING SNAPSHOT");
      this.global_operation_serial = data.serial;
      DataStore.load_snapshot(data.snapshot, this.engine.datastore);
      return this.info("PCE LOADED SNAPSHOT. EXPECTING SERIAL", this.global_operation_serial);
    };

    ProcessingChainEntrance.prototype.dump_snapshot = function() {
      var _this = this;
      this.info("PCE DUMPING SNAPSHOT");
      return this.journal.initialize_log("w").then(function() {
        return _this.create_snapshot();
      }).then(function(snapshot) {
        return _this.journal.record(JSON.stringify(snapshot));
      }).then(function() {
        return _this.info("DONE DUMPING SNAPSHOT");
      });
    };

    return ProcessingChainEntrance;

  })();

}).call(this);
