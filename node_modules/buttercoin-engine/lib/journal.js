// Generated by CoffeeScript 1.6.3
(function() {
  var Journal, Q, QFS, fs, jspack, logger,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Q = require('q');

  QFS = require("q-io/fs");

  fs = require("fs");

  jspack = require('jspack').jspack;

  logger = require('../lib/logger');

  module.exports = Journal = (function() {
    function Journal(filename) {
      this.filename = filename != null ? filename : 'journal.log';
      this.flush = __bind(this.flush, this);
      this.record = __bind(this.record, this);
      this.replay_log = __bind(this.replay_log, this);
      this.initialize_log = __bind(this.initialize_log, this);
      this.shutdown = __bind(this.shutdown, this);
      this.start = __bind(this.start, this);
      this.readstream = null;
      this.writefd = null;
    }

    Journal.prototype.start = function(execute_operation, load_snapshot) {
      var _this = this;
      return QFS.exists(this.filename).then(function(retval) {
        if (retval) {
          return Q.fcall(function() {
            return _this.replay_log(execute_operation, load_snapshot).then(function() {
              return _this.initialize_log("a");
            });
          });
        } else {
          return Q.fcall(function() {
            return _this.initialize_log();
          });
        }
      });
    };

    Journal.prototype.shutdown = function() {
      var promise,
        _this = this;
      promise = Q.when(null);
      if (this.writefd !== null) {
        promise = Q.nfcall(fs.fsync, this.writefd).then(function() {
          return Q.nfcall(fs.close, _this.writefd).then(function() {
            return _this.writefd = null;
          });
        });
      }
      return promise;
    };

    Journal.prototype.initialize_log = function(flags) {
      var _this = this;
      if (flags == null) {
        flags = "w";
      }
      return Q.nfcall(fs.open, this.filename, flags).then(function(writefd) {
        return _this.writefd = writefd;
      });
    };

    Journal.prototype.replay_log = function(execute_operation, load_snapshot) {
      var deferred, parts,
        _this = this;
      this.readstream = fs.createReadStream(this.filename, {
        flags: "r"
      });
      deferred = Q.defer();
      parts = [];
      this.readstream.on('end', function() {});
      this.readstream.on('error', function(error) {});
      this.readstream.on('close', function(close) {
        return deferred.resolve();
      });
      this.readstream.on('readable', function() {
        var c, chunk, data, lenbin, lenprefix, operation, rest;
        data = _this.readstream.read();
        lenbin = data.slice(0, 4);
        if (lenbin.length !== 4) {
          throw Error("Didn't read 4 bytes for length prefix");
        }
        lenprefix = jspack.Unpack('I', (function() {
          var _i, _len, _ref, _results;
          _ref = lenbin.toString('binary').split('');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            c = _ref[_i];
            _results.push(c.charCodeAt(0));
          }
          return _results;
        })(), 0)[0];
        chunk = data.slice(4, 4 + lenprefix);
        if (data.length > 4 + lenprefix) {
          rest = data.slice(4 + lenprefix);
        } else {
          rest = '';
        }
        if (chunk.length === lenprefix) {
          operation = JSON.parse(chunk.toString());
          if (operation.snapshot) {
            load_snapshot(operation);
          } else {
            execute_operation(operation);
          }
          return _this.readstream.unshift(rest);
        } else {
          return _this.readstream.unshift(data);
        }
      });
      return deferred.promise;
    };

    Journal.prototype.record = function(message) {
      var buf, l, part, writeq;
      if (this.writefd === null) {
        return Q.when(null);
      }
      l = message.length;
      part = jspack.Pack('I', [l]);
      buf = Buffer.concat([Buffer(part), Buffer(message)]);
      writeq = Q.nfcall(fs.write, this.writefd, buf, 0, buf.length, null);
      return writeq;
    };

    Journal.prototype.flush = function() {
      var _this = this;
      return Q.nfcall(fs.fsync, this.writefd).then(function() {});
    };

    return Journal;

  })();

}).call(this);
