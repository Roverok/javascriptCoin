// Generated by CoffeeScript 1.6.3
(function() {
  var Account, QueryInterface, op,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Account = require('./datastore/account');

  op = require('./operations');

  module.exports = QueryInterface = (function() {
    function QueryInterface(datastore) {
      this.datastore = datastore;
      this.get_open_orders = __bind(this.get_open_orders, this);
      this.get_balances = __bind(this.get_balances, this);
      this.balancesheet = this.datastore.balancesheet;
      this.supermarket = this.datastore.supermarket;
    }

    QueryInterface.prototype.get_balances = function(account_id) {
      var acct, balances, c, v, _ref;
      acct = this.balancesheet.get_account(account_id);
      balances = {};
      _ref = Account.supported_currencies;
      for (c in _ref) {
        v = _ref[c];
        if (v) {
          balances[c] = acct.get_balance(c).toString();
        }
      }
      return op.create.result[op.BALANCES](account_id, balances);
    };

    QueryInterface.prototype.get_open_orders = function(account_id) {
      var acct;
      acct = this.balancesheet.get_account(account_id);
      return op.create.result[op.OPEN_ORDERS](account_id, acct.get_open_orders());
    };

    QueryInterface.prototype.get_spread = function(left_currency, right_currency) {
      var books, market, prices, _ref, _ref1,
        _this = this;
      market = this.supermarket.get_market(left_currency, right_currency);
      books = [market.left_book, market.right_book];
      prices = books.map(function(x) {
        return _this.top_of_book(x).price;
      });
      if (market.left_currency === left_currency) {
        prices[1] = (_ref = prices[1]) != null ? _ref.inverse() : void 0;
      } else {
        prices[0] = (_ref1 = prices[0]) != null ? _ref1.inverse() : void 0;
      }
      return {
        bid: prices[0],
        ask: prices[1]
      };
    };

    QueryInterface.prototype.get_ticker = function(left_currency, right_currency) {
      var market, spread;
      market = this.supermarket.get_market(left_currency, right_currency);
      spread = this.get_spread(left_currency, right_currency);
      return op.create.result[op.TICKER](left_currency, spread.bid, spread.ask, market.get_last_price(left_currency));
    };

    QueryInterface.prototype.top_of_book = function(book) {
      var result;
      result = {};
      book.store.for_levels_above(void 0, function(price, level) {
        result.price = price;
        return false;
      });
      return result;
    };

    return QueryInterface;

  })();

}).call(this);
