// Generated by CoffeeScript 1.6.3
(function() {
  var Journal, PCE, Q, Tempfile, TradeEngine, count, journalFile, old_log, pce, replicationStub;

  Tempfile = require('temporary/lib/file');

  PCE = require('../lib/pce');

  Journal = require('../lib/journal');

  TradeEngine = require('../lib/trade_engine');

  Q = require('Q');

  journalFile = new Tempfile;

  replicationStub = (function() {
    var deferred;
    deferred = Q.defer();
    deferred.resolve(void 0);
    return {
      start: (function() {
        return deferred.promise;
      }),
      send: (function() {
        return deferred.promise;
      })
    };
  })();

  pce = new PCE(new TradeEngine(), new Journal(journalFile.path), replicationStub);

  count = 10000;

  old_log = console.log;

  console.log = function() {};

  pce.start().then(function() {
    var n, qs, startTime, submitTime;
    startTime = process.hrtime();
    qs = (function() {
      var _i, _results;
      _results = [];
      for (n = _i = 1; 1 <= count ? _i <= count : _i >= count; n = 1 <= count ? ++_i : --_i) {
        _results.push(pce.forward_operation({
          kind: 'test'
        }));
      }
      return _results;
    })();
    submitTime = process.hrtime(startTime);
    return Q.all(qs).fail(function() {}).fin(function() {
      var elapsedTime, tps;
      elapsedTime = process.hrtime(startTime);
      elapsedTime = elapsedTime[0] * 1000 + elapsedTime[1] / 1000000;
      submitTime = submitTime[0] * 1000 + submitTime[1] / 1000000;
      console.log = old_log;
      console.log("" + count + " ops in " + (submitTime.toFixed(3)) + " ms");
      tps = count / (submitTime / 1000);
      console.log("\t" + (tps.toFixed(0)) + " TPS, " + ((submitTime / count).toFixed(3)) + " ms/op");
      console.log("\tjournal written in " + (elapsedTime.toFixed(3)) + " ms");
      console.log("\t" + ((count / (elapsedTime / 1000)).toFixed(0)) + " JPS, " + ((elapsedTime / count).toFixed(3)) + " ms/op");
      return journalFile.unlink();
    }).done();
  });

}).call(this);
