// Generated by CoffeeScript 1.6.3
(function() {
  var ApiProtocol, ApiServer, EngineApi, WebsocketListener, operations, stump, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  EngineApi = require('../ews/ew_api');

  WebsocketListener = require('../ews/ws_listener');

  ApiProtocol = require('./api_protocol');

  operations = require('../operations');

  stump = require('stump');

  module.exports = ApiServer = (function() {
    ApiServer.default_options = {
      port: 3001,
      engine: {
        port: 6150
      },
      query: {
        port: 6151
      }
    };

    function ApiServer(options) {
      var filter, op, _i, _j, _len, _len1, _ref, _ref1;
      if (options == null) {
        options = {};
      }
      this.new_connection = __bind(this.new_connection, this);
      this.start = __bind(this.start, this);
      stump.stumpify(this, this.constructor.name);
      this.options = _.extend(ApiServer.default_options, options);
      this.api = new EngineApi(options);
      _ref = [operations.ADD_DEPOSIT, operations.WITHDRAW_FUNDS, operations.CREATE_LIMIT_ORDER, operations.CANCEL_ORDER];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        op = _ref[_i];
        this.api.event_filters[op] = function(data) {
          return [
            {
              name: "" + op + "?account=" + data.operation.account,
              data: data
            }
          ];
        };
      }
      _ref1 = [operations.CREATE_LIMIT_ORDER, operations.CANCEL_ORDER];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        op = _ref1[_j];
        filter = this.api.event_filters[op] || function() {
          return [];
        };
        this.api.event_filters[op] = function(data) {
          return filter(data).push({
            name: op,
            data: data
          });
        };
      }
    }

    ApiServer.prototype.start = function() {
      var _this = this;
      this.connection_map = {};
      return this.api.start().then(function() {
        _this.listener = new WebsocketListener({
          wsconfig: {
            port: _this.options.port
          },
          protocol_factory: _this.new_connection
        });
        return _this.listener.listen();
      }).then(function() {
        return _this.info("API service started");
      });
    };

    ApiServer.prototype.new_connection = function(connection) {
      var e, protocol;
      try {
        this.connection_map[connection.conncounter] = connection;
        protocol = new ApiProtocol({
          event_source: this.api
        }, this);
        return protocol.start(connection);
      } catch (_error) {
        e = _error;
        this.error(e);
        return console.log(e.stack);
      }
    };

    return ApiServer;

  })();

}).call(this);
