// Generated by CoffeeScript 1.6.3
(function() {
  var ApiProtocol, Protocol, operations, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Protocol = require('../ews/protocol');

  operations = require('../operations');

  module.exports = ApiProtocol = (function(_super) {
    __extends(ApiProtocol, _super);

    function ApiProtocol() {
      this.handle_close = __bind(this.handle_close, this);
      this.handle_auth_failure = __bind(this.handle_auth_failure, this);
      this.handle_auth_success = __bind(this.handle_auth_success, this);
      this.handle_auth_request = __bind(this.handle_auth_request, this);
      this.handle_parsed_data = __bind(this.handle_parsed_data, this);
      this.report_user_cancelled_order = __bind(this.report_user_cancelled_order, this);
      this.report_user_order = __bind(this.report_user_order, this);
      this.report_withdrawl = __bind(this.report_withdrawl, this);
      this.report_deposit = __bind(this.report_deposit, this);
      this.handle_open = __bind(this.handle_open, this);
      this.mkGeneralListeners = __bind(this.mkGeneralListeners, this);
      this.mkAcctListeners = __bind(this.mkAcctListeners, this);
      _ref = ApiProtocol.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ApiProtocol.prototype.mkAcctListeners = function(account_id) {
      var mkOp;
      mkOp = function(op) {
        return "" + op + "?account=" + account_id;
      };
      return [[mkOp(operations.ADD_DEPOSIT), this.report_deposit], [mkOp(operations.WITHDRAW_FUNDS), this.report_withdrawl], [mkOp(operations.CREATE_LIMIT_ORDER), this.report_user_order], [mkOp(operations.CANCEL_ORDER), this.report_user_cancelled_order]];
    };

    ApiProtocol.prototype.mkGeneralListeners = function() {
      return [[operations.CREATE_LIMIT_ORDER, this.report_order], [operations.CANCEL_ORDER, this.report_cancelled]];
    };

    ApiProtocol.prototype.handle_open = function(connection) {
      var x, _i, _len, _ref1, _ref2;
      this.error("HANDLE_OPEN");
      this.authenticated = false;
      this.event_source = this.options.event_source;
      _ref1 = this.mkGeneralListeners();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        x = _ref1[_i];
        (_ref2 = this.event_source).on.apply(_ref2, x);
      }
      return this.protocol_ready.resolve(this);
    };

    ApiProtocol.prototype.report_deposit = function() {};

    ApiProtocol.prototype.report_withdrawl = function() {};

    ApiProtocol.prototype.report_user_order = function() {};

    ApiProtocol.prototype.report_user_cancelled_order = function() {};

    ApiProtocol.prototype.handle_parsed_data = function(data) {
      if (data.kind === 'AUTH') {
        return this.handle_auth_request(data);
      } else {
        return this.connection.send_obj({
          operation: data,
          result: 'bad_request'
        });
      }
    };

    ApiProtocol.prototype.handle_auth_request = function(data) {
      this.warn("HANDLING AUTH REQUEST:", data);
      if (!(this.authenticated && data.account_id)) {
        this.authenticated = true;
        return this.handle_auth_success(data);
      } else {
        return this.handle_auth_failure(data);
      }
    };

    ApiProtocol.prototype.handle_auth_success = function(data) {
      var x, _i, _len, _ref1, _ref2;
      this.info("AUTH SUCCESS");
      _ref1 = this.mkAcctListeners(data.account_id);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        x = _ref1[_i];
        (_ref2 = this.options.event_source).on.apply(_ref2, x);
      }
      this.connection.send_obj({
        operation: data,
        result: 'success'
      });
      return this.warn("DONE");
    };

    ApiProtocol.prototype.handle_auth_failure = function(data) {
      this.info("AUTH FAILURE");
      return this.connection.send_obj({
        operation: data,
        result: 'failure'
      });
    };

    ApiProtocol.prototype.handle_close = function() {
      var x, _i, _j, _len, _len1, _ref1, _ref2, _ref3, _ref4, _results;
      _ref1 = this.mkGeneralListeners();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        x = _ref1[_i];
        (_ref2 = this.event_source).removeListener.apply(_ref2, x);
      }
      if (this.account_id) {
        _ref3 = this.mkAcctListeners(this.account_id);
        _results = [];
        for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
          x = _ref3[_j];
          _results.push((_ref4 = this.event_source).removeListener.apply(_ref4, x));
        }
        return _results;
      }
    };

    return ApiProtocol;

  })(Protocol);

}).call(this);
