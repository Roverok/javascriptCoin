// Generated by CoffeeScript 1.6.3
(function() {
  var BE, EngineServer, EngineWebsocketSlave, QueryProtocol, SlaveProtocol, WebsocketInitiator, WebsocketListener, stump, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore');

  stump = require('stump');

  BE = require('buttercoin-engine');

  WebsocketListener = require('./ws_listener');

  WebsocketInitiator = require('./ws_initiator');

  EngineServer = require('../engine_server');

  SlaveProtocol = require('./s_protocol');

  QueryProtocol = require('./q_protocol');

  module.exports = EngineWebsocketSlave = (function(_super) {
    __extends(EngineWebsocketSlave, _super);

    EngineWebsocketSlave.default_options = {
      port: 6151,
      upstream_port: 6150,
      journalname: 'slave.testjournal'
    };

    function EngineWebsocketSlave(options) {
      if (options == null) {
        options = {};
      }
      this.downstream_connection_lost = __bind(this.downstream_connection_lost, this);
      this.new_connection = __bind(this.new_connection, this);
      this.initialize_downstream = __bind(this.initialize_downstream, this);
      this.connect_upstream = __bind(this.connect_upstream, this);
      this.start = __bind(this.start, this);
      options = _.extend(EngineWebsocketSlave.default_options, options);
      EngineWebsocketSlave.__super__.constructor.call(this, options);
    }

    EngineWebsocketSlave.prototype.start = function() {
      var _this = this;
      this.connection_map = {};
      this.closed = false;
      return this.pce.start().then(function() {
        return _this.connect_upstream();
      }).then(function() {
        return _this.options.protocol.fetch_snapshot();
      }).then(function(snapshot) {
        _this.info("SLAVE GOT SNAPSHOT");
        _this.pce.load_snapshot(snapshot.operation);
        return _this.pce.dump_snapshot();
      }).then(function() {
        _this.info('SLAVE INITIALIZING DOWNSTREAM LISTENER');
        _this.query_interface = new BE.QueryInterface(_this.pce.engine.datastore);
        return _this.initialize_downstream();
      }).then(function() {
        return _this.info('SLAVE BOOT COMPLETE');
      });
    };

    EngineWebsocketSlave.prototype.connect_upstream = function() {
      var wsi, wsi_options,
        _this = this;
      this.info('CONNECT UPSTREAM');
      this.options.protocol = this.options.protocol || new SlaveProtocol({
        pce: this.pce
      });
      wsi_options = {
        wsconfig: "ws://localhost:" + this.options.upstream_port,
        protocol: this.options.protocol
      };
      wsi = new WebsocketInitiator(wsi_options);
      return wsi.connect().then(function() {
        return _this.info('CONNECTED');
      });
    };

    EngineWebsocketSlave.prototype.initialize_downstream = function() {
      var ws_options,
        _this = this;
      ws_options = {
        wsconfig: {
          port: this.options.port
        },
        protocol_factory: this.new_connection
      };
      this.listener = new WebsocketListener(ws_options);
      return this.listener.listen().then(function() {
        return _this.info("QUERY SERVER LISTENING", ws_options.wsconfig);
      });
    };

    EngineWebsocketSlave.prototype.new_connection = function(connection) {
      var e, protocol,
        _this = this;
      try {
        this.connection_map[connection.conncounter] = connection;
        protocol = new QueryProtocol({
          connection_lost: this.downstream_connection_lost,
          send: function(obj) {
            return connection.send_obj(obj);
          },
          query_provider: this.query_interface
        });
        return protocol.start(connection);
      } catch (_error) {
        e = _error;
        this.error(e);
        return console.log(e.stack);
      }
    };

    EngineWebsocketSlave.prototype.downstream_connection_lost = function(connection) {
      return delete this.connection_map[connection.conncounter];
    };

    return EngineWebsocketSlave;

  })(EngineServer);

}).call(this);
