// Generated by CoffeeScript 1.6.3
(function() {
  var InitiatorProtocol, Protocol, Q, helpers, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  helpers = require('enkihelpers');

  Q = require('q');

  Protocol = require('./protocol');

  module.exports = InitiatorProtocol = (function(_super) {
    __extends(InitiatorProtocol, _super);

    function InitiatorProtocol() {
      this.execute_operation = __bind(this.execute_operation, this);
      this.handle_parsed_data = __bind(this.handle_parsed_data, this);
      this.handle_open = __bind(this.handle_open, this);
      _ref = InitiatorProtocol.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    InitiatorProtocol.prototype.handle_open = function(connection) {
      this.protocol_ready.resolve(this);
      return this.operation_tracker = {};
    };

    InitiatorProtocol.prototype.handle_parsed_data = function(data) {
      var deferred;
      deferred = this.operation_tracker[data.operation.opid];
      if (deferred) {
        delete this.operation_tracker[data.operation.opid];
        deferred.resolve(data);
      } else {
        this.emit('data', data);
      }
      return this.emit('data', data);
    };

    InitiatorProtocol.prototype.execute_operation = function(_operation) {
      var deferred, operation, opid,
        _this = this;
      operation = helpers.extend({}, _operation);
      deferred = Q.defer();
      opid = operation.opid = helpers.generate_id(128);
      this.operation_tracker[opid] = deferred;
      return this.protocol_ready.promise.then(function() {
        _this.connection.send_obj(operation);
        return deferred.promise;
      });
    };

    return InitiatorProtocol;

  })(Protocol);

}).call(this);
