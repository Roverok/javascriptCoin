// Generated by CoffeeScript 1.6.3
(function() {
  var BC, EngineWebsocketApi, EventEmitter, Initiator, InitiatorProtocol, Q, stump, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore');

  stump = require('stump');

  Q = require('q');

  Initiator = require('./ws_initiator');

  InitiatorProtocol = require('./i_protocol');

  EventEmitter = require('chained-emitter').EventEmitter;

  BC = require('buttercoin-engine');

  module.exports = EngineWebsocketApi = (function(_super) {
    __extends(EngineWebsocketApi, _super);

    EngineWebsocketApi.default_options = {
      engine: {
        port: 6150
      },
      query: {
        port: 6151
      }
    };

    function EngineWebsocketApi(options) {
      var _base, _base1;
      if (options == null) {
        options = {};
      }
      this.get_spread = __bind(this.get_spread, this);
      this.get_balances = __bind(this.get_balances, this);
      this.place_limit_order = __bind(this.place_limit_order, this);
      this.withdraw_funds = __bind(this.withdraw_funds, this);
      this.deposit_funds = __bind(this.deposit_funds, this);
      this.handle_engine_data = __bind(this.handle_engine_data, this);
      this.connect_to = __bind(this.connect_to, this);
      this.start = __bind(this.start, this);
      this.options = _.extend(EngineWebsocketApi.default_options, options);
      (_base = this.options.query).protocol || (_base.protocol = new InitiatorProtocol({}));
      (_base1 = this.options.engine).protocol || (_base1.protocol = new InitiatorProtocol({}));
      this.query = this.options.query.protocol;
      this.engine = this.options.engine.protocol;
      this.engine.on('data', this.handle_engine_data);
      this.event_filters = {};
      stump.stumpify(this, this.constructor.name);
    }

    EngineWebsocketApi.prototype.start = function() {
      var _this = this;
      return Q.all([this.connect_to(this.options.engine), this.connect_to(this.options.query)]).then(function() {
        return _this.info("API READY");
      }).fail(function(error) {
        return _this.error("COULDN'T CONNECT:", error);
      });
    };

    EngineWebsocketApi.prototype.connect_to = function(options) {
      var ws_options, wsi;
      ws_options = {
        wsconfig: "ws://localhost:" + options.port,
        protocol: options.protocol
      };
      this.info("CONNECTING TO", ws_options.wsconfig);
      wsi = new Initiator(ws_options);
      return wsi.connect();
    };

    EngineWebsocketApi.prototype.handle_engine_data = function(data) {
      var e, filter, _i, _len, _ref, _ref1, _results;
      filter = this.event_filters[data != null ? (_ref = data.operation) != null ? _ref.kind : void 0 : void 0];
      if (filter) {
        _ref1 = filter(data);
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          e = _ref1[_i];
          _results.push(this.emit(e.name, e.data));
        }
        return _results;
      } else {
        return this.emit('data', data);
      }
    };

    EngineWebsocketApi.prototype.deposit_funds = function(account_id, currency, amount) {
      this.info("DEPOSITING " + amount + " " + currency + " to account " + account_id);
      return this.engine.execute_operation({
        kind: BC.operations.ADD_DEPOSIT,
        account: account_id,
        amount: amount,
        currency: currency
      });
    };

    EngineWebsocketApi.prototype.withdraw_funds = function(account_id, currency, amount) {
      this.info("WITHDRAWING " + amount + " " + currency + " from account " + account_id);
      return this.engine.execute_operation({
        kind: BC.operations.WITHDRAW_FUNDS,
        account: account_id,
        amount: amount,
        currency: currency
      });
    };

    EngineWebsocketApi.prototype.place_limit_order = function(account_id, order) {
      order.account = account_id;
      order.kind = BC.operations.CREATE_LIMIT_ORDER;
      this.info("CREATING LIMIT ORDER " + (JSON.stringify(order)));
      return this.engine.execute_operation(order);
    };

    EngineWebsocketApi.prototype.get_balances = function(account_id) {
      this.info("SENDING GET_BALANCES");
      return this.query.execute_operation({
        kind: BC.operations.GET_BALANCES,
        args: [account_id]
      });
    };

    EngineWebsocketApi.prototype.get_spread = function() {};

    return EngineWebsocketApi;

  })(EventEmitter);

}).call(this);
