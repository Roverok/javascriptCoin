// Generated by CoffeeScript 1.6.3
(function() {
  var Protocol, Q, SlaveProtocol, helpers, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  helpers = require('enkihelpers');

  Q = require('q');

  Protocol = require('./protocol');

  module.exports = SlaveProtocol = (function(_super) {
    __extends(SlaveProtocol, _super);

    function SlaveProtocol() {
      this.fetch_snapshot = __bind(this.fetch_snapshot, this);
      this.handle_parsed_data = __bind(this.handle_parsed_data, this);
      this.handle_open = __bind(this.handle_open, this);
      _ref = SlaveProtocol.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SlaveProtocol.prototype.handle_open = function(connection) {
      return this.protocol_ready.resolve(this);
    };

    SlaveProtocol.prototype.handle_parsed_data = function(parsed_data) {
      var _this = this;
      if (parsed_data.operation.opid === this.snapshot_opid) {
        this.info("SLAVE GOT SNAPSHOT_RESULT");
        this.snapshot_opid = null;
        this.snapshot_deferred.resolve(parsed_data);
        this.snapshot_deferred = null;
        return true;
      } else if (parsed_data.operation.kind === "SNAPSHOT_RESULT") {
        this.info("IGNORING SNAPSHOT_RESULT");
        return true;
      }
      this.info('SLAVERESOLVING', parsed_data.operation.opid);
      Q.fcall(function() {
        return _this.options.pce.forward_operation(parsed_data.operation).then(function(result) {
          return _this.info('PCE COMPLETED', result);
        });
      }).done();
      return true;
    };

    SlaveProtocol.prototype.fetch_snapshot = function() {
      var _this = this;
      this.snapshot_opid = helpers.generate_id(128);
      this.snapshot_deferred = Q.defer();
      return this.protocol_ready.promise.then(function() {
        _this.connection.send_obj({
          kind: "SNAPSHOT",
          opid: _this.snapshot_opid
        });
        return _this.snapshot_deferred.promise;
      });
    };

    return SlaveProtocol;

  })(Protocol);

}).call(this);
