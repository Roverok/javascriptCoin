// Generated by CoffeeScript 1.6.3
(function() {
  var Protocol, Q, QueryProtocol, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  Q = require('q');

  Protocol = require('./protocol');

  module.exports = QueryProtocol = (function(_super) {
    __extends(QueryProtocol, _super);

    function QueryProtocol(options, parent) {
      this.get_balances = __bind(this.get_balances, this);
      this.handle_parsed_data = __bind(this.handle_parsed_data, this);
      this.handle_close = __bind(this.handle_close, this);
      QueryProtocol.__super__.constructor.call(this, options, parent);
      this.query_interface = this.options.query_provider;
      this.handlers = {
        GET_BALANCES: this.get_balances
      };
    }

    QueryProtocol.prototype.handle_close = function() {
      this.info('QUERY PROTOCOL CLOSED');
      return this.options.connection_lost(this.connection);
    };

    QueryProtocol.prototype.handle_parsed_data = function(parsed_data) {
      var result, _ref, _ref1;
      if (_ref = parsed_data != null ? parsed_data.kind : void 0, __indexOf.call(_.keys(this.handlers), _ref) < 0) {
        this.info("INVALID OPERATION", parsed_data != null ? parsed_data.kind : void 0);
        this.options.send({
          status: "error",
          message: "Invalid operation: " + (parsed_data != null ? parsed_data.kind : void 0),
          operation: parsed_data
        });
      }
      result = (_ref1 = this.handlers)[parsed_data.kind].apply(_ref1, parsed_data.args);
      result.operation = parsed_data;
      return this.options.send(result);
    };

    QueryProtocol.prototype.get_balances = function(account_id) {
      var res;
      res = this.query_interface.get_balances(account_id);
      return {
        balances: res
      };
    };

    return QueryProtocol;

  })(Protocol);

}).call(this);
