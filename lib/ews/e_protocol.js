// Generated by CoffeeScript 1.6.3
(function() {
  var EngineProtocol, Protocol, Q, helpers, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  helpers = require('enkihelpers');

  Q = require('q');

  Protocol = require('./protocol');

  module.exports = EngineProtocol = (function(_super) {
    __extends(EngineProtocol, _super);

    function EngineProtocol() {
      this.handle_parsed_data = __bind(this.handle_parsed_data, this);
      this.handle_close = __bind(this.handle_close, this);
      _ref = EngineProtocol.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    EngineProtocol.prototype.handle_close = function() {
      this.info('PROTOCOL CLOSED');
      return this.options.connection_lost(this.connection);
    };

    EngineProtocol.prototype.handle_parsed_data = function(parsed_data) {
      var _this = this;
      if (parsed_data.kind === 'SNAPSHOT') {
        this.info('TAKING PCE SNAPSHOT');
        return this.options.pce.create_snapshot().then(function(result) {
          _this.info('SNAPSHOT DONE');
          result = {
            operation: {
              kind: 'SNAPSHOT_RESULT',
              opid: parsed_data.opid,
              serial: result.serial,
              snapshot: result.snapshot
            }
          };
          return _this.options.send_all(result);
        });
      } else {
        return this.options.pce.forward_operation(parsed_data).then(function(result) {
          _this.info('PCE COMPLETED', result);
          return _this.options.send_all(result);
        });
      }
    };

    return EngineProtocol;

  })(Protocol);

}).call(this);
